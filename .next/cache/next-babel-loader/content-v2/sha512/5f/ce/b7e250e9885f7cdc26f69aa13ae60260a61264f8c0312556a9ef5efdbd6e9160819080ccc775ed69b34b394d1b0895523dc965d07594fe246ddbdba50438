{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\n/* eslint-disable no-nested-ternary */\nimport { useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styled from '@emotion/styled';\nimport { CheckCircleOutlined, SyncOutlined } from '@ant-design/icons';\nimport modelspecSlice from '../../../redux/reducers/modelspec';\nconst Wrapper = styled.div`\n    padding: 8px;\n`;\nconst Title = styled.div`\n    font-size: 16px;\n    font-weight: 200;\n`;\nconst Colors = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n`;\nconst Color = styled.span`\n    width: ${props => props.isSelected ? '65px' : '60px'};\n    height: ${props => props.isSelected ? '65px' : '60px'};\n    background-color: ${props => props.color && `${props.color}`};\n    \n    position: relative;\n    \n    ${props => props.isSelected ? 'box-shadow: 1px 1px 5px 1px gray; border: none; z-index: 5' : 'border: 1px solid lightgray;'};\n\n    .anticon {\n        font-size: 20px;\n        border-radius: 50%;\n        position: relative;\n        top: 60%;\n        left: 60%;\n    }\n    .check {\n        border: 1px solid white;\n        background: red;\n        color: white;\n    }\n    .loading {\n        border: 3px solid lightgray;\n        background: lightgray;\n        font-size: 16px;\n        color: gray;\n    }\n`;\n\nconst ColorBox = ({\n  text,\n  colors\n}) => {\n  const imgLoaded = true;\n  const dispatch = useDispatch();\n  const selectedColor = useSelector(state => {\n    if (text !== '') {\n      return state.modelspec.custom.exterior;\n    }\n\n    return state.modelspec.custom.interior;\n  });\n  const onSelect = useCallback(e => {\n    console.log(e.target.id);\n\n    if (text !== '') {\n      dispatch(modelspecSlice.actions.exteriorColorChange(e.target.id));\n    } else {\n      dispatch(modelspecSlice.actions.interiorColorChange(e.target.id));\n    }\n  }, []);\n  return __jsx(Wrapper, null, __jsx(Title, null, text), __jsx(Colors, null, colors.map(color => {\n    if (color === selectedColor) {\n      return __jsx(Color, {\n        color: color,\n        isSelected: true,\n        id: color,\n        onClick: onSelect\n      }, true ? imgLoaded ? __jsx(CheckCircleOutlined, {\n        className: \"check\"\n      }) : __jsx(SyncOutlined, {\n        spin: true,\n        className: \"loading\"\n      }) : '');\n    }\n\n    return __jsx(Color, {\n      color: color,\n      isSelected: false,\n      id: color,\n      onClick: onSelect\n    }, false ? imgLoaded ? __jsx(CheckCircleOutlined, {\n      className: \"check\"\n    }) : __jsx(SyncOutlined, {\n      spin: true,\n      className: \"loading\"\n    }) : '');\n  })));\n};\n\nexport default ColorBox;","map":null,"metadata":{},"sourceType":"module"}