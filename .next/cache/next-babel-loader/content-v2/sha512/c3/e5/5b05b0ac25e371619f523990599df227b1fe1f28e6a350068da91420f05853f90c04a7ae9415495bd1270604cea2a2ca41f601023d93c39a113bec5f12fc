{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState, useCallback } from 'react';\nimport styled from '@emotion/styled';\nconst Wrapper = styled.div`\n  position: sticky;\n  top: 0;\n  height: 60px;\n  background-color: white;\n  z-index: 20;\n  box-shadow: 0px 1px 5px lightgray;\n  & > div {\n    width: 86vw;\n    margin: 0 auto;\n    overflow: scroll;\n    ul {\n      width: 1000px;\n      padding: 0;\n      display: flex;\n      flex-wrap: nowrap;\n      li {\n        height: 48px;\n        margin: 0 10px;\n        padding: 15px 0 5px;\n        list-style: none;\n        font-size: 16px;\n        color: black;\n  \n        a {\n          color: black;\n          &:hover {\n            color: #d5011c;\n          }\n        }\n        ${props => props.active && `&:nth-of-type(${props.active}) { border-bottom: 3px solid #d5011c; }`}\n      }\n    }\n  }\n`;\n\nconst StickyNav = ({\n  navList\n}) => {\n  const {\n    0: activeNav,\n    1: setActiveNav\n  } = useState(1);\n  const {\n    0: scrollPos,\n    1: setScrollPos\n  } = useState(0);\n  const {\n    0: sectionPosition,\n    1: setSectionPosition\n  } = useState([]);\n  useEffect(() => {\n    function onScroll() {\n      setScrollPos(window.scrollY);\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, []);\n  useEffect(() => {\n    setSectionPosition([...document.querySelectorAll('.sticky-nav-section')].map(item => parseInt(`${item.getBoundingClientRect().top + window.scrollY - 60}`, 10)));\n  }, [scrollPos]);\n  useEffect(() => {\n    sectionPosition.forEach((section, i) => {\n      if (section <= window.scrollY) {\n        setActiveNav(+i + 1);\n      }\n    });\n  }, [scrollPos]);\n  const onClick = useCallback(e => {\n    const targetSectionId = e.target.getAttribute('href');\n    e.preventDefault();\n    setActiveNav(+e.target.id);\n    window.scrollTo({\n      top: document.querySelector(targetSectionId).getBoundingClientRect().top + window.scrollY - 60,\n      left: 0,\n      behavior: 'smooth'\n    });\n  }, []);\n  return __jsx(Wrapper, {\n    active: activeNav\n  }, __jsx(\"div\", null, __jsx(\"ul\", null, navList === null || navList === void 0 ? void 0 : navList.map((v, i) => __jsx(\"li\", null, __jsx(\"a\", {\n    href: `#nav${i + 1}`,\n    id: `${i + 1}`,\n    onClick: onClick\n  }, v))))));\n};\n\nexport default StickyNav;","map":null,"metadata":{},"sourceType":"module"}